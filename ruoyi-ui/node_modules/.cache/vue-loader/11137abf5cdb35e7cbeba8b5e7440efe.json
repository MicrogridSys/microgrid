{"remainingRequest":"D:\\java\\RuoYi-Cloud\\ruoyi-ui\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\java\\RuoYi-Cloud\\ruoyi-ui\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\java\\RuoYi-Cloud\\ruoyi-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\java\\RuoYi-Cloud\\ruoyi-ui\\src\\views\\microgrid\\powermonitor\\signboard.vue?vue&type=template&id=364d4fa4&","dependencies":[{"path":"D:\\java\\RuoYi-Cloud\\ruoyi-ui\\src\\views\\microgrid\\powermonitor\\signboard.vue","mtime":1693207911867},{"path":"D:\\java\\RuoYi-Cloud\\ruoyi-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1681828569330},{"path":"D:\\java\\RuoYi-Cloud\\ruoyi-ui\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1681828570496},{"path":"D:\\java\\RuoYi-Cloud\\ruoyi-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1681828569330},{"path":"D:\\java\\RuoYi-Cloud\\ruoyi-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":1681828570219}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}